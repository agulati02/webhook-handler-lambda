name: Deploy Source to Lambda

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'requirements.txt'
      - 'tests/**'
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-2
  PYTHON_VERSION: '3.13'
  LAMBDA_FUNCTION_NAME: orchestrate_agentic_code_review
  LAYER_NAME: code-reviewer-dependencies

jobs:
  # Stage 1: Build and validate
  build:
    name: Build Dependencies
    runs-on: ubuntu-latest
    outputs:
      layer-changed: ${{ steps.check-changes.outputs.changed }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if requirements changed
        id: check-changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "requirements.txt"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "> Requirements.txt has changed - will update layer"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "> Requirements.txt unchanged - skipping layer update"
          fi

      - name: Set up Python
        if: steps.check-changes.outputs.changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements -t python/ --extra-index-url https://test.pypi.org/simple/

      - name: Create Lambda Layer package
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          zip -r layer.zip python/
          echo "Layer size: $(du -h layer.zip | cut -f1)"

      - name: Upload layer artifact
        if: steps.check-changes.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: lambda-layer
          path: layer.zip
          retention-days: 1

  # Stage 2: Package source code
  package:
    name: Package Source Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Zip source code
        run: |
          zip -r function.zip src/ -x "*.pyc" -x "*__pycache__*" -x "*.git*" -x "*test*"
          echo "Function package size: $(du -h function.zip | cut -f1)"

      - name: Upload function artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-function
          path: function.zip
          retention-days: 1

  # Stage 3: Deploy Lambda Layer (only if dependencies changed)
  deploy-layer:
    name: Deploy Lambda Layer
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.layer-changed == 'true'
    outputs:
      layer-arn: ${{ steps.publish-layer.outputs.layer_arn }}
    
    steps:
      - name: Download layer artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-layer

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Publish Lambda Layer
        id: publish-layer
        run: |
          echo "> Publishing new layer version..."
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name ${{ env.LAYER_NAME }} \
            --zip-file fileb://layer.zip \
            --compatible-runtimes python${{ env.PYTHON_VERSION }} \
            --region ${{ env.AWS_REGION }} \
            --description "Deployed from GitHub Actions - $(date)" \
            --query 'LayerVersionArn' \
            --output text)
          
          echo "layer_arn=$LAYER_ARN" >> $GITHUB_OUTPUT
          echo "> Published layer: $LAYER_ARN"

      - name: Update Lambda function layer
        run: |
          echo "> Attaching layer to Lambda function..."
          aws lambda update-function-configuration \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --layers ${{ steps.publish-layer.outputs.layer_arn }} \
            --region ${{ env.AWS_REGION }}

      - name: Wait for layer update
        run: |
          echo "> Waiting for layer update to complete..."
          aws lambda wait function-updated \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --region ${{ env.AWS_REGION }}
          echo "> Layer update completed"

  # Stage 4: Deploy Lambda Function Code
  deploy-function:
    name: Deploy Lambda Function
    runs-on: ubuntu-latest
    needs: [package, deploy-layer]
    if: |
      always() && 
      needs.package.result == 'success' &&
      (needs.deploy-layer.result == 'success' || needs.deploy-layer.result == 'skipped')
    
    steps:
      - name: Download function artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-function

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy function code
        run: |
          echo "> Deploying function code..."
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://function.zip \
            --region ${{ env.AWS_REGION }} \
            --publish

      - name: Wait for deployment
        run: |
          echo "> Waiting for function update to complete..."
          aws lambda wait function-updated \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --region ${{ env.AWS_REGION }}
          echo "> Function deployment completed"

  # Stage 5: Verify and Test
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy-function
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check function state
        run: |
          echo "> Verifying deployment..."
          FUNCTION_STATUS=$(aws lambda get-function \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Configuration.State' \
            --output text)
          
          echo "Function state: $FUNCTION_STATUS"
          
          if [ "$FUNCTION_STATUS" != "Active" ]; then
            echo "> Error: Function is not in Active state"
            exit 1
          fi

      - name: Get function details
        run: |
          echo "> Function Details:"
          aws lambda get-function \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Configuration.[Runtime,MemorySize,Timeout,LastModified,Version]' \
            --output table

      - name: Get latest layer info
        run: |
          echo "> Layer Information:"
          aws lambda get-function \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Configuration.Layers[*].[Arn,CodeSize]' \
            --output table

      - name: Deployment summary
        run: |
          echo "> Deployment completed successfully!"
          echo "Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
          echo "Region: ${{ env.AWS_REGION }}"
          echo "Timestamp: $(date)"

  # Stage 6: Cleanup (optional - runs even if other jobs fail)
  cleanup:
    name: Cleanup Old Layers
    runs-on: ubuntu-latest
    needs: [verify]
    if: always()
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Remove old layer versions
        run: |
          echo "> Cleaning up old layer versions (keeping last 3)..."
          
          VERSIONS=$(aws lambda list-layer-versions \
            --layer-name ${{ env.LAYER_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'LayerVersions[3:].Version' \
            --output text)
          
          if [ -z "$VERSIONS" ]; then
            echo "No old versions to delete"
          else
            for VERSION in $VERSIONS; do
              echo "Deleting version $VERSION..."
              aws lambda delete-layer-version \
                --layer-name ${{ env.LAYER_NAME }} \
                --version-number $VERSION \
                --region ${{ env.AWS_REGION }} || true
            done
            echo "> Cleanup completed"
          fi